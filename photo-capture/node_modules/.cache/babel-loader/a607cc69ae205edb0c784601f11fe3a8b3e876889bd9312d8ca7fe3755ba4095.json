{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Desktop/Biometric Systems/BioWIP/photo-capture/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [name, setName] = useState('');\n  const [surname, setSurname] = useState('');\n  const [photos, setPhotos] = useState([]);\n  const handleFileChange = event => {\n    const files = event.target.files;\n    const promises = Array.from(files).map(file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      });\n    });\n    Promise.all(promises).then(images => setPhotos(images));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5000/register', {\n        name,\n        surname,\n        photo1: photos[0],\n        photo2: photos[1],\n        photo3: photos[2]\n      });\n      alert('User registered: ' + response.data.message);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      alert('Registration failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        placeholder: \"Name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: surname,\n        onChange: e => setSurname(e.target.value),\n        placeholder: \"Surname\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \"image/*\",\n        multiple: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rDeHUhYdw4wbChN6reMEbDEhDI8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","name","setName","surname","setSurname","photos","setPhotos","handleFileChange","event","files","target","promises","Array","from","map","file","Promise","resolve","reject","reader","FileReader","onload","e","result","onerror","readAsDataURL","all","then","images","handleSubmit","preventDefault","response","post","photo1","photo2","photo3","alert","data","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","placeholder","required","accept","multiple","_c","$RefreshReg$"],"sources":["/home/alexander/Desktop/Biometric Systems/BioWIP/photo-capture/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [surname, setSurname] = useState('');\n  const [photos, setPhotos] = useState([]);\n\n  const handleFileChange = (event) => {\n    const files = event.target.files;\n    const promises = Array.from(files).map(file => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (e) => resolve(e.target.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(file);\n        });\n    });\n    Promise.all(promises).then(images => setPhotos(images));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5000/register', {\n        name,\n        surname,\n        photo1: photos[0],\n        photo2: photos[1],\n        photo3: photos[2]\n      });\n      alert('User registered: ' + response.data.message);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      alert('Registration failed');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Register</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Name\" required />\n        <input type=\"text\" value={surname} onChange={e => setSurname(e.target.value)} placeholder=\"Surname\" required />\n        <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" multiple required />\n        <button type=\"submit\">Register</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}